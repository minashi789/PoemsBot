package main

import (
	"log"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

const adminID int64 = 958829846 // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID

// StartBot –∑–∞–ø—É—Å–∫–∞–µ—Ç Telegram-–±–æ—Ç–∞
func StartBot(botToken string) {
	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true
	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil { // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª—é–±—ã–µ –Ω–µ–ø—Ä—è–º–æ –∞–¥—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
			continue
		}

		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "")

		switch {
		case update.Message.IsCommand():
			switch update.Message.Command() {
			case "start":
				msg.Text = "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —ç–º–æ—Ü–∏—é üòä, üòû, üòÇ, ‚ù§Ô∏è, ü•î, ü©∏ –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Å—Ç–∏—Ö! –ß—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help"
				Logger.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s (%d) –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É /start", update.Message.From.UserName, update.Message.From.ID)
			case "random":
				msg.Text = GetRandomPoem()
				Logger.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s (%d) –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É /random", update.Message.From.UserName, update.Message.From.ID)
			case "addpoem":
				if update.Message.From.ID != adminID {
					msg.Text = "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
					Logger.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s (%d) –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /addpoem –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", update.Message.From.UserName, update.Message.From.ID)
					break
				}

				args := strings.SplitN(update.Message.CommandArguments(), " ", 2)
				if len(args) < 2 {
					msg.Text = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addpoem <—ç–º–æ—Ü–∏—è> <—Ç–µ–∫—Å—Ç>"
					Logger.Printf("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä %s (%d) –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É /addpoem —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏", update.Message.From.UserName, update.Message.From.ID)
					break
				}

				emotion := args[0]
				poemText := args[1]

				AddPoem(emotion, poemText)
				SavePoemsToFile("poems.json")
				msg.Text = "–°—Ç–∏—Ö —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"
				Logger.Printf("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä %s (%d) –¥–æ–±–∞–≤–∏–ª —Å—Ç–∏—Ö –¥–ª—è —ç–º–æ—Ü–∏–∏ '%s': %s", update.Message.From.UserName, update.Message.From.ID, emotion, poemText)
			case "removepoem":
				if update.Message.From.ID != adminID {
					msg.Text = "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
					Logger.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s (%d) –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /removepoem –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", update.Message.From.UserName, update.Message.From.ID)
					break
				}

				args := strings.SplitN(update.Message.CommandArguments(), " ", 2)
				if len(args) < 2 {
					msg.Text = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removepoem <—ç–º–æ—Ü–∏—è> <—Ç–µ–∫—Å—Ç>"
					Logger.Printf("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä %s (%d) –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É /removepoem —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏", update.Message.From.UserName, update.Message.From.ID)
					break
				}

				emotion := args[0]
				poemText := args[1]

				removed := RemovePoem(emotion, poemText)
				if removed {
					SavePoemsToFile("poems.json")
					msg.Text = "–°—Ç–∏—Ö —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!"
					Logger.Printf("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä %s (%d) —É–¥–∞–ª–∏–ª —Å—Ç–∏—Ö –¥–ª—è —ç–º–æ—Ü–∏–∏ '%s': %s", update.Message.From.UserName, update.Message.From.ID, emotion, poemText)
				} else {
					msg.Text = "–°—Ç–∏—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω."
					Logger.Printf("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä %s (%d) –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∏—Ö –¥–ª—è —ç–º–æ—Ü–∏–∏ '%s': %s", update.Message.From.UserName, update.Message.From.ID, emotion, poemText)
				}
			case "listpoems":
				// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã (—Ñ–∏–ª—å—Ç—Ä –ø–æ —ç–º–æ—Ü–∏–∏)
				args := strings.SplitN(update.Message.CommandArguments(), " ", 1)
				emotionFilter := ""
				if len(args) > 0 {
					emotionFilter = args[0]
				}

				// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∏—Ö–∏
				poemsList := ListAllPoems(emotionFilter)
				if poemsList == "" {
					msg.Text = "–°—Ç–∏—Ö–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
					Logger.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s (%d) –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É /listpoems –¥–ª—è —ç–º–æ—Ü–∏–∏ '%s', –Ω–æ —Å—Ç–∏—Ö–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", update.Message.From.UserName, update.Message.From.ID, emotionFilter)
				} else {
					// –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
					parts := SplitLongMessage(poemsList)

					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
					for _, part := range parts {
						msg.Text = part
						msg.ParseMode = "Markdown" // –í–∫–ª—é—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown
						bot.Send(msg)
					}
					Logger.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s (%d) –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É /listpoems –¥–ª—è —ç–º–æ—Ü–∏–∏ '%s'", update.Message.From.UserName, update.Message.From.ID, emotionFilter)
				}
			case "help":
				msg.Text = `–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:
				/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.
				/random - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏—Ö.
				/listpoems [—ç–º–æ—Ü–∏—è] - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—Ç–∏—Ö–∏ –∏–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —ç–º–æ—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /listpoems üòä).
				–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç–º–æ—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, üòä, üòû, üòÇ, ‚ù§Ô∏è, ü•î, ü©∏) - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏—Ö –¥–ª—è —ç—Ç–æ–π —ç–º–æ—Ü–∏–∏.
				
				–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:
				/addpoem <—ç–º–æ—Ü–∏—è> <—Ç–µ–∫—Å—Ç> - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∏—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞).
				/removepoem <—ç–º–æ—Ü–∏—è> <—Ç–µ–∫—Å—Ç> - –£–¥–∞–ª–∏—Ç—å —Å—Ç–∏—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞).`
				Logger.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s (%d) –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É /help", update.Message.From.UserName, update.Message.From.ID)
				bot.Send(msg) // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å—é–¥–∞
			default:
				emotion := ConvertToEmotionKey(update.Message.Text)
				Logger.Printf("–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–∞—è —ç–º–æ—Ü–∏—è: %s", emotion)
				if poem, exists := GetRandomPoemByEmotion(emotion); exists {
					msg.Text = poem
					Logger.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s (%d) –ø–æ–ª—É—á–∏–ª —Å—Ç–∏—Ö –¥–ª—è —ç–º–æ—Ü–∏–∏ '%s'", update.Message.From.UserName, update.Message.From.ID, emotion)
				} else {
					msg.Text = "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π —ç–º–æ—Ü–∏–∏ üòï\n–ü–æ–ø—Ä–æ–±—É–π –æ–¥–Ω—É –∏–∑ —ç—Ç–∏—Ö: üòä, üòû, üòÇ, ‚ù§Ô∏è, ü•î, ü©∏."
					Logger.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s (%d) –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é —ç–º–æ—Ü–∏—é: %s", update.Message.From.UserName, update.Message.From.ID, update.Message.Text)
				}
				bot.Send(msg) // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å—é–¥–∞
			}
		}
	}
}
